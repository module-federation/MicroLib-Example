{"version":3,"sources":["webpack://microlib-example/./src/services/webswitch.js"],"names":["FQDN","process","env","WEBSWITCH_HOST","PORT","PATH","getHostName","dns","address","console","log","warn","ws","publishEvent","event","observer","useWebswitch","hostname","serializedEvent","JSON","stringify","webswitch","debug","WebSocket","on","message","parse","notify","eventName","send","error","e","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACa;;;;;;AAEb;AACA;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,cAAZ,IAA8B,qBAA3C;AACA,IAAMC,IAAI,GAAG,IAAb;AACA,IAAMC,IAAI,GAAG,cAAb;;SAEeC,W;;;AAWf;;;;yEAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEkBC,0DAAA,CAAWP,IAAX,CAFlB;;AAAA;AAAA,iBAEoC,UAAAQ,OAAO;AAAA,qBAAIC,OAAO,CAACC,GAAR,CAAYF,OAAZ,CAAJ;AAAA,aAF3C;AAAA;AAAA;AAAA;;AAAA,0BAGQR,IAHR;AAAA;AAAA;;AAAA;AAAA,0BAIQ,WAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMIS,mBAAO,CAACE,IAAR,CAAa,YAAb;;AANJ;AAAA,6CAQS,WART;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAYA,IAAIC,EAAJ;AAEO,SAAeC,YAAtB;AAAA;AAAA,C,CAqCA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;0EA/GO,kBAA4BC,KAA5B,EAAmCC,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6CC,wBAA7C,8DAA4D,IAA5D;;AAAA,gBACAF,KADA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAGkBR,WAAW,EAH7B;;AAAA;AAGCW,oBAHD;AAICC,2BAJD,GAImBC,IAAI,CAACC,SAAL,CAAeN,KAAf,CAJnB;;AAML,gBAAI;AACOO,uBADP,GACF,SAASA,SAAT,GAAqB;AACnBZ,uBAAO,CAACa,KAAR,CAAc,SAAd,EAAyBR,KAAzB;;AAEA,oBAAI,CAACF,EAAL,EAAS;AACPA,oBAAE,GAAG,IAAIW,2CAAJ,gBAAsBN,QAAtB,cAAkCb,IAAlC,SAAyCC,IAAzC,EAAL;AAEAO,oBAAE,CAACY,EAAH,CAAM,SAAN,EAAiB,UAAUC,OAAV,EAAmB;AAClC,wBAAMX,KAAK,GAAGK,IAAI,CAACO,KAAL,CAAWD,OAAX,CAAd;AACAhB,2BAAO,CAACa,KAAR,CAAcG,OAAd;AACAhB,2BAAO,CAACa,KAAR,CAAcR,KAAd;AACAC,4BAAQ,CAACY,MAAT,CAAgBb,KAAK,CAACc,SAAtB,EAAiCd,KAAjC;AACD,mBALD;AAOAF,oBAAE,CAACY,EAAH,CAAM,MAAN,EAAc,YAAY;AACxBZ,sBAAE,CAACiB,IAAH,CAAQX,eAAR;AACD,mBAFD;AAIAN,oBAAE,CAACY,EAAH,CAAM,OAAN,EAAe,UAAUM,KAAV,EAAiB;AAC9BrB,2BAAO,CAACqB,KAAR,CAAc,2BAAd,EAA2CA,KAA3C;AACD,mBAFD;AAGA;AACD;;AACDlB,kBAAE,CAACiB,IAAH,CAAQX,eAAR;AACD,eAxBC;;AAyBFG,uBAAS;AACV,aA1BD,CA0BE,OAAOU,CAAP,EAAU;AACVtB,qBAAO,CAACE,IAAR,CAAaE,YAAY,CAACmB,IAA1B,EAAgCD,CAAC,CAACN,OAAlC;AACD;;AAlCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"src_services_webswitch_js.js","sourcesContent":["/**\n * WEBSWITCH (c)\n * websocket clients connect to a common server,\n * which broadcasts any messages it receives.\n */\n\"use strict\";\n\nimport WebSocket from \"ws\";\nimport dns from \"dns/promises\";\n\nconst FQDN = process.env.WEBSWITCH_HOST || \"webswitch.aegis.dev\";\nconst PORT = 8062;\nconst PATH = \"/api/publish\";\n\nasync function getHostName() {\n  try {\n    return (await dns.lookup(FQDN), address => console.log(address))\n      ? FQDN\n      : \"localhost\";\n  } catch (error) {\n    console.warn(\"dns lookup\", error);\n  }\n  return \"localhost\";\n}\n\n/**@type import(\"ws/lib/websocket\") */\nlet ws;\n\nexport async function publishEvent(event, observer, useWebswitch = true) {\n  if (!event) return;\n\n  const hostname = await getHostName();\n  const serializedEvent = JSON.stringify(event);\n\n  try {\n    function webswitch() {\n      console.debug(\"sending\", event);\n\n      if (!ws) {\n        ws = new WebSocket(`ws://${hostname}:${PORT}${PATH}`);\n\n        ws.on(\"message\", function (message) {\n          const event = JSON.parse(message);\n          console.debug(message);\n          console.debug(event);\n          observer.notify(event.eventName, event);\n        });\n\n        ws.on(\"open\", function () {\n          ws.send(serializedEvent);\n        });\n\n        ws.on(\"error\", function (error) {\n          console.error(\"webswitchClient.on(error)\", error);\n        });\n        return;\n      }\n      ws.send(serializedEvent);\n    }\n    webswitch();\n  } catch (e) {\n    console.warn(publishEvent.name, e.message);\n  }\n}\n\n// setTimeout(() => {\n//   webswitchClient.ping();\n// }, 30000);\n\n// const timerId = setTimeout(() => {\n//   webswitchClient.terminate();\n//   webswitch();\n// }, 60000);\n\n// webswitchClient.on(\"pong\", function () {\n//   clearTimeout(timerId);\n//   setTimeout(() => webswitchClient.ping(), 30000);\n// });\n\n// function getHeaders(method, payload) {\n//   const contentLength = [\"POST\", \"PATCH\"].includes(method)\n//     ? Buffer.byteLength(payload)\n//     : 0;\n\n//   const contentHeaders = { \"Content-Type\": \"application/json\" };\n\n//   return contentLength > 0\n//     ? { ...contentHeaders, \"Content-Length\": contentLength }\n//     : contentHeaders;\n// }\n\n// async function httpsClient({\n//   hostname,\n//   port,\n//   path,\n//   protocol = \"https\",\n//   method = \"GET\",\n//   payload = \"\",\n//   safe = true,\n// }) {\n//   return new Promise(function (resolve, reject) {\n//     const normal = {\n//       hostname,\n//       port,\n//       path,\n//       method,\n//       headers: getHeaders(method, payload),\n//     };\n\n//     const options = safe ? normal : { ...normal, rejectUnauthorized: false };\n//     const chunks = [];\n//     const client = {\n//       http: http,\n//       https: https,\n//     };\n\n//     try {\n//       const req = client[protocol].request(options, res => {\n//         res.setEncoding(\"utf8\");\n//         res.on(\"data\", chunk => chunks.push(chunk));\n//         res.on(\"error\", e => console.warn(httpsClient.name, e.message));\n//         res.on(\"end\", () => resolve(chunks.join(\"\")));\n//       });\n//       req.on(\"error\", e => reject(e));\n//       if (payload) req.on(\"connect\", () => req.write(payload));\n//     } catch (e) {\n//       console.warn(httpsClient.name, e.message);\n//     }\n//   });\n// }\n\n// else {\n//   httpsClient({\n//     hostname,\n//     port,\n//     path,\n//     method: \"POST\",\n//     payload: serialziedEvent,\n//   });\n// }\n"],"sourceRoot":""}