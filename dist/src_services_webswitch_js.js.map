{"version":3,"sources":["webpack://microlib-example/./src/services/webswitch.js"],"names":["FQDN","process","env","WEBSWITCH_HOST","PORT","PATH","getHostName","dns","address","console","log","warn","getHeaders","method","payload","contentLength","includes","Buffer","byteLength","contentHeaders","httpsClient","hostname","port","path","protocol","safe","Promise","resolve","reject","normal","headers","options","rejectUnauthorized","chunks","client","http","https","req","request","res","setEncoding","on","chunk","push","e","name","message","join","write","webswitchClient","publishEvent","event","observer","useWebswitch","serializedEvent","JSON","stringify","webswitch","debug","WebSocket","setTimeout","ping","timerId","terminate","clearTimeout","readyState","send","notify","eventName","serialziedEvent"],"mappings":"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","file":"src_services_webswitch_js.js","sourcesContent":["/**\n * WEBSWITCH (c)\n * websocket clients connect to a common server,\n * which broadcasts any messages it receives.\n */\n\"use strict\";\n\nimport WebSocket from \"ws\";\nimport dns from \"dns/promises\";\nimport http from \"http\";\nimport https from \"https\";\n\nconst FQDN = process.env.WEBSWITCH_HOST || \"webswitch.aegis.dev\";\nconst PORT = 8062;\nconst PATH = \"/api/publish\";\n\nasync function getHostName() {\n  try {\n    return (await dns.lookup(FQDN), address => console.log(address))\n      ? FQDN\n      : \"localhost\";\n  } catch (error) {\n    console.warn(\"dns lookup\", error);\n  }\n  return \"localhost\";\n}\n\nfunction getHeaders(method, payload) {\n  const contentLength = [\"POST\", \"PATCH\"].includes(method)\n    ? Buffer.byteLength(payload)\n    : 0;\n\n  const contentHeaders = { \"Content-Type\": \"application/json\" };\n\n  return contentLength > 0\n    ? { ...contentHeaders, \"Content-Length\": contentLength }\n    : contentHeaders;\n}\n\nasync function httpsClient({\n  hostname,\n  port,\n  path,\n  protocol = \"https\",\n  method = \"GET\",\n  payload = \"\",\n  safe = true,\n}) {\n  return new Promise(function (resolve, reject) {\n    const normal = {\n      hostname,\n      port,\n      path,\n      method,\n      headers: getHeaders(method, payload),\n    };\n\n    const options = safe ? normal : { ...normal, rejectUnauthorized: false };\n    const chunks = [];\n    const client = {\n      http: http,\n      https: https,\n    };\n\n    try {\n      const req = client[protocol].request(options, res => {\n        res.setEncoding(\"utf8\");\n        res.on(\"data\", chunk => chunks.push(chunk));\n        res.on(\"error\", e => console.warn(httpsClient.name, e.message));\n        res.on(\"end\", () => resolve(chunks.join(\"\")));\n      });\n      req.on(\"error\", e => reject(e));\n      if (payload) req.on(\"connect\", () => req.write(payload));\n    } catch (e) {\n      console.warn(httpsClient.name, e.message);\n    }\n  });\n}\n\n/**@type import(\"ws/lib/websocket\") */\nlet webswitchClient;\n\nexport async function publishEvent(event, observer, useWebswitch = true) {\n  if (!event) return;\n\n  const hostname = await getHostName();\n  const serializedEvent = JSON.stringify(event);\n\n  try {\n    if (useWebswitch) {\n      console.debug(\"using webswitch\");\n\n      function webswitch() {\n        console.debug(\"calling\", event);\n\n        if (!webswitchClient) {\n          webswitchClient = new WebSocket(`ws://${hostname}:${PORT}${PATH}`);\n        }\n\n        setTimeout(() => {\n          webswitchClient.ping();\n        }, 30000);\n\n        const timerId = setTimeout(() => {\n          webswitchClient.terminate();\n          webswitch();\n        }, 60000);\n\n        webswitchClient.on(\"pong\", function () {\n          clearTimeout(timerId);\n          setTimeout(() => webswitchClient.ping(), 30000);\n        });\n\n        webswitchClient.on(\"open\", function () {\n          console.log(\"readyState\", webswitchClient.readyState);\n          console.debug(\"sending\");\n          webswitchClient.send(serializedEvent);\n        });\n\n        webswitchClient.on(\"message\", function (message) {\n          // const event = JSON.parse(message);\n          console.debug(message);\n          observer.notify(event.eventName, event);\n        });\n\n        webswitchClient.send(serializedEvent);\n      }\n\n      webswitch();\n    } else {\n      httpsClient({\n        hostname,\n        port,\n        path,\n        method: \"POST\",\n        payload: serialziedEvent,\n      });\n    }\n  } catch (e) {\n    console.warn(publishEvent.name, e.message);\n  }\n}\n"],"sourceRoot":""}