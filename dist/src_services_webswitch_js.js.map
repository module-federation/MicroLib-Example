{"version":3,"sources":["webpack://microlib-example/./src/services/webswitch.js"],"names":["FQDN","process","env","WEBSWITCH_HOST","PORT","PATH","lookup","hostname","dns","result","console","debug","address","warn","getHostName","ws","publishEvent","event","observer","webswitch","WebSocket","on","message","JSON","parse","eventName","notify","send","stringify","error","readyState","serializedEvent","setTimeout","e","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACa;;;;;;AAEb;AACA;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,cAAZ,IAA8B,qBAA3C;AACA,IAAMC,IAAI,GAAG,IAAb;AACA,IAAMC,IAAI,GAAG,sBAAb;;SAEeC,M;;;;;oEAAf,iBAAsBC,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEyBC,0DAAA,CAAWD,QAAX,CAFzB;;AAAA;AAEUE,kBAFV;AAGIC,mBAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,MAAhC,EAAwCA,MAAM,CAACG,OAA/C;AAHJ,6CAIWH,MAAM,CAACG,OAJlB;;AAAA;AAAA;AAAA;AAMIF,mBAAO,CAACG,IAAR,CAAa,YAAb;;AANJ;AAAA,6CAQS,IART;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAWeC,W;;;AAKf;;;;yEALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACyBR,MAAM,CAACN,IAAD,CAD/B;;AAAA;AACQO,oBADR;AAAA,8CAESA,QAAQ,GAAGA,QAAH,GAAc,WAF/B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAMA,IAAIQ,EAAJ;AAEO,SAAeC,YAAtB;AAAA;AAAA;;;0EAAO,kBAA4BC,KAA5B,EAAmCC,QAAnC;AAAA,mCAMIC,SANJ;AAAA;AAAA;AAAA;AAAA;AAMIA,qBANJ,yBAMgB;AACnBT,qBAAO,CAACC,KAAR,CAAc,mBAAd,EAAmCM,KAAnC;;AAEA,kBAAI,CAACF,EAAL,EAAS;AACPA,kBAAE,GAAG,IAAIK,2CAAJ,gBAAsBb,QAAtB,cAAkCH,IAAlC,SAAyCC,IAAzC,EAAL;AAEAU,kBAAE,CAACM,EAAH,CAAM,SAAN,EAAiB,UAAUC,OAAV,EAAmB;AAClCZ,yBAAO,CAACC,KAAR,CAAcW,OAAd;AACA,sBAAML,KAAK,GAAGM,IAAI,CAACC,KAAL,CAAWF,OAAX,CAAd;AACA,sBAAIL,KAAK,CAACQ,SAAV,EAAqBP,QAAQ,CAACQ,MAAT,CAAgBT,KAAK,CAACQ,SAAtB,EAAiCR,KAAjC;AACtB,iBAJD;AAMAF,kBAAE,CAACM,EAAH,CAAM,MAAN,EAAc,YAAY;AACxBN,oBAAE,CAACY,IAAH,CAAQJ,IAAI,CAACK,SAAL,CAAe,WAAf,CAAR;AACD,iBAFD;AAIAb,kBAAE,CAACM,EAAH,CAAM,OAAN,EAAe,UAAUQ,KAAV,EAAiB;AAC9BnB,yBAAO,CAACmB,KAAR,CAAc,2BAAd,EAA2CA,KAA3C;AACD,iBAFD;AAGA;AACD;;AAED,uBAASF,IAAT,GAAgB;AACd,oBAAIZ,EAAE,CAACe,UAAP,EAAmB;AACjBf,oBAAE,CAACY,IAAH,CAAQI,eAAR;AACA;AACD;;AACDC,0BAAU,CAAC;AAAA,yBAAML,IAAI,EAAV;AAAA,iBAAD,EAAe,IAAf,CAAV;AACD;;AAEDA,kBAAI;AACL,aArCI;;AAAA,gBACAV,KADA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAGkBH,WAAW,EAH7B;;AAAA;AAGCP,oBAHD;AAICwB,2BAJD,GAImBR,IAAI,CAACK,SAAL,CAAeX,KAAf,CAJnB;;AAuCL,gBAAI;AACFE,uBAAS;AACV,aAFD,CAEE,OAAOc,CAAP,EAAU;AACVvB,qBAAO,CAACG,IAAR,CAAaG,YAAY,CAACkB,IAA1B,EAAgCD,CAAC,CAACX,OAAlC;AACD;;AA3CI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"src_services_webswitch_js.js","sourcesContent":["/**\n * WEBSWITCH (c)\n * websocket clients connect to a common server,\n * which broadcasts any messages it receives.\n */\n\"use strict\";\n\nimport WebSocket from \"ws\";\nimport dns from \"dns/promises\";\n\nconst FQDN = process.env.WEBSWITCH_HOST || \"webswitch.aegis.dev\";\nconst PORT = 8062;\nconst PATH = \"/webswitch/broadcast\";\n\nasync function lookup(hostname) {\n  try {\n    const result = await dns.lookup(hostname);\n    console.debug(\"server address\", result, result.address);\n    return result.address;\n  } catch (error) {\n    console.warn(\"dns lookup\", error);\n  }\n  return null;\n}\n\nasync function getHostName() {\n  const hostname = await lookup(FQDN);\n  return hostname ? hostname : \"localhost\";\n}\n\n/**@type import(\"ws/lib/websocket\") */\nlet ws;\n\nexport async function publishEvent(event, observer) {\n  if (!event) return;\n\n  const hostname = await getHostName();\n  const serializedEvent = JSON.stringify(event);\n\n  function webswitch() {\n    console.debug(\"webswitch sending\", event);\n\n    if (!ws) {\n      ws = new WebSocket(`ws://${hostname}:${PORT}${PATH}`);\n\n      ws.on(\"message\", function (message) {\n        console.debug(message);\n        const event = JSON.parse(message);\n        if (event.eventName) observer.notify(event.eventName, event);\n      });\n\n      ws.on(\"open\", function () {\n        ws.send(JSON.stringify(\"webswitch\"));\n      });\n\n      ws.on(\"error\", function (error) {\n        console.error(\"webswitchClient.on(error)\", error);\n      });\n      return;\n    }\n\n    function send() {\n      if (ws.readyState) {\n        ws.send(serializedEvent);\n        return;\n      }\n      setTimeout(() => send(), 1000);\n    }\n\n    send();\n  }\n\n  try {\n    webswitch();\n  } catch (e) {\n    console.warn(publishEvent.name, e.message);\n  }\n}\n"],"sourceRoot":""}