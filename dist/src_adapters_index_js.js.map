{"version":3,"sources":["webpack://microlib-example/./src/adapters/address-adapter.js","webpack://microlib-example/./src/adapters/event-adapter.js","webpack://microlib-example/./src/adapters/index.js","webpack://microlib-example/./src/adapters/inventory-adapter.js","webpack://microlib-example/./src/adapters/payment-adapter.js","webpack://microlib-example/./src/adapters/shipping-adapter.js","webpack://microlib-example/./src/services/event-service.js"],"names":["validateAddress","service","options","order","model","args","callback","decrypt","shippingAddress","update","console","error","func","name","subscriptions","Map","filterMatches","message","filter","regex","RegExp","result","test","debug","Subscription","id","topic","filters","once","unsubscribe","get","getId","getModel","getSubscriptions","entries","every","subscription","listen","Event","arg","has","set","listening","forEach","notify","JSON","parse","pickOrder","Promise","resolve","reject","orderNo","event","log","pickupAddress","eventData","warehouse_addr","newOrder","then","stringify","eventType","eventTime","Date","toUTCString","eventSource","replyChannel","commandName","commandArgs","lineItems","orderItems","externalId","reason","Error","authorizePayment","paymentAuthorization","completePayment","confirmationCode","refundPayment","ORDER_SERVICE","ORDER_TOPIC","handleError","file","__filename","shipOrder","shipOrderCallback","callShipOrder","shipTo","shipFrom","signature","signatureRequired","requester","respondOn","payload","getPayload","updated","trackShipment","trackShipmentCallback","callTrackShipment","shipmentId","trackingStatus","verifyDelivery","verifyDeliveryCallback","callVerifyDelivery","trackingId","brokers","process","env","KAFKA_BROKERS","topics","KAFKA_TOPICS","groupId","KAFKA_GROUP_ID","pid","kafka","Kafka","clientId","split","consumer","producer","connect","subscribe","fromBeginning","run","eachMessage","value","toString","send","messages","disconnect"],"mappings":";;;;;;;;;;;;;;;;;;;AAAa;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACO,SAASA,eAAT,CAAyBC,OAAzB,EAAkC;AACvC;AAAA,uEAAO,iBAAgBC,OAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEIC,mBAFJ,GAIDD,OAJC,CAEHE,KAFG,iCAIDF,OAJC,CAGHG,IAHG,MAGIC,QAHJ;AAAA;AAAA;AAAA,qBAO2BL,OAAO,CAACD,eAAR,CAC5BG,KAAK,CAACI,OAAN,GAAgBC,eADY,CAP3B;;AAAA;AAOGA,6BAPH;AAAA;AAAA,qBAUkBF,QAAQ,CAACJ,OAAD,EAAU;AAAEM,+BAAe,EAAfA;AAAF,eAAV,CAV1B;;AAAA;AAUGC,oBAVH;AAAA,+CAWIA,MAXJ;;AAAA;AAAA;AAAA;AAaHC,qBAAO,CAACC,KAAR,CAAc;AAAEC,oBAAI,EAAEZ,eAAe,CAACa,IAAxB;AAA8BF,qBAAK,aAAnC;AAAqCT,uBAAO,EAAPA;AAArC,eAAd;;AAbG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAgBD,C;;;;;;;;;;;;;;;;;;;;;;AChCY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,IAAMY,aAAa,GAAG,IAAIC,GAAJ,EAAtB;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;AAC9B,SAAO,UAAUC,MAAV,EAAkB;AACvB,QAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAWF,MAAX,CAAd;AACA,QAAMG,MAAM,GAAGF,KAAK,CAACG,IAAN,CAAWL,OAAX,CAAf;AACAP,WAAO,CAACa,KAAR,CAAc;AAAEX,UAAI,EAAEI,aAAa,CAACH,IAAtB;AAA4BK,YAAM,EAANA,MAA5B;AAAoCG,YAAM,EAANA,MAApC;AAA4CJ,aAAO,EAAPA;AAA5C,KAAd;AACA,WAAOI,MAAP;AACD,GALD;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMG,YAAY,GAAG,SAAfA,YAAe,OAAyD;AAAA,MAA7CC,EAA6C,QAA7CA,EAA6C;AAAA,MAAzCnB,QAAyC,QAAzCA,QAAyC;AAAA,MAA/BoB,KAA+B,QAA/BA,KAA+B;AAAA,MAAxBC,OAAwB,QAAxBA,OAAwB;AAAA,MAAfC,IAAe,QAAfA,IAAe;AAAA,MAATxB,KAAS,QAATA,KAAS;AAC5E,SAAO;AACL;AACJ;AACA;AACIyB,eAJK,yBAIS;AACZf,mBAAa,CAACgB,GAAd,CAAkBJ,KAAlB,YAAgCD,EAAhC;AACD,KANI;AAQLM,SARK,mBAQG;AACN,aAAON,EAAP;AACD,KAVI;AAYLO,YAZK,sBAYM;AACT,aAAO5B,KAAP;AACD,KAdI;AAgBL6B,oBAhBK,8BAgBc;AACjB,gCAAWnB,aAAa,CAACoB,OAAd,EAAX;AACD,KAlBI;;AAoBL;AACJ;AACA;AACA;AACUhB,UAxBD,kBAwBQD,OAxBR,EAwBiB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAChBU,OADgB;AAAA;AAAA;AAAA;;AAAA,qBAGdA,OAAO,CAACQ,KAAR,CAAcnB,aAAa,CAACC,OAAD,CAA3B,CAHc;AAAA;AAAA;AAAA;;AAIhB,oBAAIW,IAAJ,EAAU;AACR;AACA,uBAAI,CAACC,WAAL;AACD;;AACDvB,wBAAQ,CAAC;AAAEW,yBAAO,EAAPA,OAAF;AAAWmB,8BAAY,EAAE;AAAzB,iBAAD,CAAR;AARgB;;AAAA;AAAA;;AAAA;AAcpB;AACA9B,wBAAQ,CAAC;AAAEW,yBAAO,EAAPA,OAAF;AAAWmB,8BAAY,EAAE;AAAzB,iBAAD,CAAR;;AAfoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBrB;AAxCI,GAAP;AA0CD,CA3CD;AA6CA;AACA;AACA;AACA;AACA;;;AACO,SAASC,MAAT,GAAiC;AAAA,MAAjBpC,OAAiB,uEAAPqC,0DAAO;AACtC;AAAA,wEAAO,kBAAgBpC,OAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEHE,mBAFG,GAIDF,OAJC,CAEHE,KAFG,iCAIDF,OAJC,CAGHG,IAHG,MAGIkC,GAHJ;AAMCH,0BAND,GAMgBZ,YAAY;AAAGpB,qBAAK,EAALA;AAAH,iBAAamC,GAAb,EAN5B;;AAAA,mBAQDzB,aAAa,CAAC0B,GAAd,CAAkBD,GAAG,CAACb,KAAtB,CARC;AAAA;AAAA;AAAA;;AASHZ,2BAAa,CAACgB,GAAd,CAAkBS,GAAG,CAACb,KAAtB,EAA6Be,GAA7B,CAAiCF,GAAG,CAACd,EAArC,EAAyCW,YAAzC;AATG,gDAUIA,YAVJ;;AAAA;AAaLtB,2BAAa,CAAC2B,GAAd,CAAkBF,GAAG,CAACb,KAAtB,EAA6B,IAAIX,GAAJ,GAAU0B,GAAV,CAAcF,GAAG,CAACd,EAAlB,EAAsBW,YAAtB,CAA7B;;AAEA,kBAAI,CAACnC,OAAO,CAACyC,SAAb,EAAwB;AACtBzC,uBAAO,CAACoC,MAAR,CAAe,SAAf;AAAA,sFAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBX,iCAAlB,SAAkBA,KAAlB,EAAyBT,OAAzB,SAAyBA,OAAzB;;AACxB,gCAAIH,aAAa,CAAC0B,GAAd,CAAkBd,KAAlB,CAAJ,EAA8B;AAC5BZ,2CAAa,CAACgB,GAAd,CAAkBJ,KAAlB,EAAyBiB,OAAzB;AAAA,oGAAiC,kBAAMP,YAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDACzBA,YAAY,CAAClB,MAAb,CAAoBD,OAApB,CADyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAjC;;AAAA;AAAA;AAAA;AAAA;AAGD;;AALuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA1B;;AAAA;AAAA;AAAA;AAAA;AAOD;;AAvBI,gDAwBEmB,YAxBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AA0BD;AAED;AACA;AACA;AACA;;AACO,SAASQ,MAAT,GAAiC;AAAA,MAAjB3C,OAAiB,uEAAPqC,0DAAO;AACtC;AAAA,wEAAO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAkBlC,mBAAlB,SAAkBA,KAAlB,oCAAyBC,IAAzB,MAAgCqB,KAAhC,kBAAuCT,OAAvC;AACLP,qBAAO,CAACa,KAAR,CAAc,YAAd,EAA4B;AAAEG,qBAAK,EAALA,KAAF;AAAST,uBAAO,EAAE4B,IAAI,CAACC,KAAL,CAAW7B,OAAX;AAAlB,eAA5B;AADK;AAAA,qBAEChB,OAAO,CAAC2C,MAAR,CAAelB,KAAf,EAAsBT,OAAtB,CAFD;;AAAA;AAAA,gDAGEb,KAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAKD,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1KY;;AAEb;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA,G;;;;;;;;;;;;;;;;;;;ACXa;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;AACO,SAAS2C,SAAT,CAAmB9C,OAAnB,EAA4B;AACjC,SAAO,UAAUC,OAAV,EAAmB;AAAA,QAEfC,KAFe,GAIpBD,OAJoB,CAEtBE,KAFsB;AAAA,uCAIpBF,OAJoB,CAGtBG,IAHsB;AAAA,QAGfC,SAHe;;AAMxB,WAAO,IAAI0C,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C;AACA,aAAO/C,KAAK,CACTkC,MADI,CACG;AACNT,YAAI,EAAE,IADA;AAENxB,aAAK,EAAED,KAFD;AAGNsB,UAAE,EAAEtB,KAAK,CAACgD,OAHJ;AAINzB,aAAK,EAAE,cAJD;AAKNC,eAAO,EAAE,CAACxB,KAAK,CAACgD,OAAP,EAAgB,aAAhB,EAA+B,gBAA/B,CALH;AAMN7C,gBAAQ;AAAA,mFAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAASW,2BAAT,QAASA,OAAT;AAAA;AAEAmC,yBAFA,GAEQP,IAAI,CAACC,KAAL,CAAW7B,OAAX,CAFR;AAGNP,2BAAO,CAAC2C,GAAR,CAAY,kBAAZ,EAAgCD,KAAhC;AACME,iCAJA,GAIgBF,KAAK,CAACG,SAAN,CAAgBC,cAJhC;AAAA;AAAA,2BAKiBlD,SAAQ,CAACJ,OAAD,EAAU;AAAEoD,mCAAa,EAAbA;AAAF,qBAAV,CALzB;;AAAA;AAKAG,4BALA;AAMNR,2BAAO,CAACQ,QAAD,CAAP,CANM,CAMa;;AANb;AAAA;;AAAA;AAAA;AAAA;AAQNP,0BAAM,aAAN;;AARM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AANF,OADH,EAmBJQ,IAnBI,CAmBC,YAAM;AACV,eAAOvD,KAAK,CAACyC,MAAN,CACL,kBADK,EAELC,IAAI,CAACc,SAAL,CAAe;AACbC,mBAAS,EAAE,SADE;AAEbC,mBAAS,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EAFE;AAGbC,qBAAW,EAAE,cAHA;AAIbT,mBAAS,EAAE;AACTU,wBAAY,EAAE,cADL;AAETC,uBAAW,EAAE,WAFJ;AAGTC,uBAAW,EAAE;AACXC,uBAAS,EAAEjE,KAAK,CAACkE,UADN;AAEXC,wBAAU,EAAEnE,KAAK,CAACgD;AAFP;AAHJ;AAJE,SAAf,CAFK,CAAP;AAgBD,OApCI,WAqCE,UAACoB,MAAD,EAAY;AACjB,cAAM,IAAIC,KAAJ,CAAUD,MAAV,CAAN;AACD,OAvCI,CAAP;AAwCD,KA1CM,CAAP;AA2CD,GAjDD;AAkDD,C;;;;;;;;;;;;;;;;;;;;;;;AC7FY;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACO,SAASE,gBAAT,CAA0BxE,OAA1B,EAAmC;AACxC;AAAA,uEAAO,iBAAgBC,OAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEMC,mBAFN,GAICD,OAJD,CAEDE,KAFC,iCAICF,OAJD,CAGDG,IAHC,MAGMC,QAHN;AAAA;AAAA,qBAMgCL,OAAO,CAACwE,gBAAR,CACjCtE,KAAK,CAACgD,OAD2B,EAEjC,IAFiC,EAGjC,KAHiC,EAIjC,KAJiC,EAKjC,KALiC,CANhC;;AAAA;AAMGuB,kCANH;AAAA,+CAaIpE,QAAQ,CAACJ,OAAD,EAAU;AAAEwE,oCAAoB,EAApBA;AAAF,eAAV,CAbZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAeD;AAED;AACA;AACA;;AACO,SAASC,eAAT,CAAyB1E,OAAzB,EAAkC;AACvC;AAAA,wEAAO,kBAAgBC,OAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEIC,mBAFJ,GAIDD,OAJC,CAEHE,KAFG,kCAIDF,OAJC,CAGHG,IAHG,MAGIC,QAHJ;AAAA;AAAA,qBAK0BL,OAAO,CAAC0E,eAAR,CAAwBxE,KAAxB,CAL1B;;AAAA;AAKCyE,8BALD;AAAA;AAAA,qBAMkBtE,QAAQ,CAACJ,OAAD,EAAU;AAAE0E,gCAAgB,EAAhBA;AAAF,eAAV,CAN1B;;AAAA;AAMCnB,sBAND;AAAA,gDAOEA,QAPF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AASD;AACD;AACA;AACA;;AACO,SAASoB,aAAT,CAAuB5E,OAAvB,EAAgC;AACrC;AAAA,wEAAO,kBAAgBC,OAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEIC,mBAFJ,GAIDD,OAJC,CAEHE,KAFG,kCAIDF,OAJC,CAGHG,IAHG,MAGIC,QAHJ;AAAA;AAAA,qBAKCL,OAAO,CAAC4E,aAAR,CAAsB1E,KAAtB,CALD;;AAAA;AAAA;AAAA,qBAMkBG,QAAQ,CAACJ,OAAD,CAN1B;;AAAA;AAMCuD,sBAND;AAAA,gDAOEA,QAPF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AASD,C;;;;;;;;;;;;;;;;;;;;;;;;AC3DY;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA,IAAMqB,aAAa,GAAG,cAAtB;AACA,IAAMC,WAAW,GAAG,cAApB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACrE,KAAD,EAAuC;AAAA,MAA/BuC,MAA+B,uEAAtB,IAAsB;AAAA,MAAhBtC,IAAgB,uEAAT,IAAS;AACzDF,SAAO,CAACC,KAAR,CAAc;AAAEsE,QAAI,EAAEC,UAAR;AAAoBtE,QAAI,EAAJA,IAApB;AAA0BD,SAAK,EAALA;AAA1B,GAAd;AACA,MAAIuC,MAAJ,EAAYA,MAAM,CAACvC,KAAD,CAAN;AACb,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASwE,SAAT,CAAmBlF,OAAnB,EAA4B;AACjC;AAAA,uEAAO,kBAAgBC,OAAhB;AAAA,0CAeIkF,iBAfJ,EAgCIC,aAhCJ;;AAAA;AAAA;AAAA;AAAA;AAgCIA,2BAhCJ,6BAgCoB;AACvB,uBAAOlF,KAAK,CAACyC,MAAN,CACL3C,OAAO,CAACyB,KADH,EAELmB,IAAI,CAACc,SAAL,CACE1D,OAAO,CAACkF,SAAR,CAAkB;AAChBG,wBAAM,EAAEnF,KAAK,CAACI,OAAN,GAAgBC,eADR;AAEhB+E,0BAAQ,EAAEpF,KAAK,CAACmD,aAFA;AAGhBc,2BAAS,EAAEjE,KAAK,CAACkE,UAHD;AAIhBmB,2BAAS,EAAErF,KAAK,CAACsF,iBAJD;AAKhBnB,4BAAU,EAAEnE,KAAK,CAACgD,OALF;AAMhBuC,2BAAS,EAAEZ,aANK;AAOhBa,2BAAS,EAAEZ;AAPK,iBAAlB,CADF,CAFK,CAAP;AAcD,eA/CI;;AAeIK,+BAfJ,+BAesBnC,OAftB,EAe+BC,MAf/B,EAeuC;AAC1C;AAAA,sFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBjC,mCAAlB,SAAkBA,OAAlB;AAAA;AAEGmC,iCAFH,GAEWP,IAAI,CAACC,KAAL,CAAW7B,OAAX,CAFX;AAGHP,mCAAO,CAACa,KAAR,CAAc,oBAAd,EAAoC6B,KAApC;AACMwC,mCAJH,GAIa3F,OAAO,CAAC4F,UAAR,CAAmBV,SAAS,CAACtE,IAA7B,EAAmCuC,KAAnC,CAJb;AAAA;AAAA,mCAKmB9C,QAAQ,CAACJ,OAAD,EAAU0F,OAAV,CAL3B;;AAAA;AAKGE,mCALH;AAMH7C,mCAAO,CAAC6C,OAAD,CAAP;AANG;AAAA;;AAAA;AAAA;AAAA;AAQHd,uCAAW,cAAQ9B,MAAR,EAAgBkC,iBAAiB,CAACvE,IAAlC,CAAX;;AARG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;;AAAA;AAAA;AAAA;AAAA;AAWD,eA3BI;;AAEIV,mBAFJ,GAIDD,OAJC,CAEHE,KAFG,iCAIDF,OAJC,CAGHG,IAHG,MAGIC,QAHJ;AAML;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAdS,gDAiDE,IAAI0C,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,uBAAO/C,KAAK,CACTkC,MADI,CACG;AACNT,sBAAI,EAAE,IADA;AAENxB,uBAAK,EAAED,KAFD;AAGNsB,oBAAE,EAAEtB,KAAK,CAACgD,OAHJ;AAINzB,uBAAK,EAAEqD,WAJD;AAKNpD,yBAAO,EAAE,CAACxB,KAAK,CAACgD,OAAP,EAAgB,cAAhB,EAAgC,YAAhC,CALH;AAMN7C,0BAAQ,EAAE8E,iBAAiB,CAACnC,OAAD,EAAUC,MAAV;AANrB,iBADH,EASJQ,IATI,CASC2B,aATD,WAUEL,WAVF,CAAP;AAWD,eAZM,CAjDF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AA+DD;AAED;AACA;AACA;AACA;;AACO,SAASe,aAAT,CAAuB9F,OAAvB,EAAgC;AACrC;AAAA,wEAAO,kBAAgBC,OAAhB;AAAA,2CAWI8F,qBAXJ,EA4BIC,iBA5BJ;;AAAA;AAAA;AAAA;AAAA;AA4BIA,+BA5BJ,iCA4BwB;AAC3B,uBAAO9F,KAAK,CAACyC,MAAN,CACL3C,OAAO,CAACyB,KADH,EAELmB,IAAI,CAACc,SAAL,CACE1D,OAAO,CAAC8F,aAAR,CAAsB;AACpBG,4BAAU,EAAE/F,KAAK,CAAC+F,UADE;AAEpB5B,4BAAU,EAAEnE,KAAK,CAACgD,OAFE;AAGpBuC,2BAAS,EAAEZ,aAHS;AAIpBa,2BAAS,EAAEZ;AAJS,iBAAtB,CADF,CAFK,CAAP;AAWD,eAxCI;;AAWIiB,mCAXJ,kCAW0B/C,OAX1B,EAWmCC,MAXnC,EAW2C;AAC9C;AAAA,sFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBjC,mCAAlB,SAAkBA,OAAlB,EAA2BmB,YAA3B,SAA2BA,YAA3B;AAAA;AAEGgB,iCAFH,GAEWP,IAAI,CAACC,KAAL,CAAW7B,OAAX,CAFX;AAGHP,mCAAO,CAACa,KAAR,CAAc,mBAAd,EAAmC6B,KAAnC;AACMwC,mCAJH,GAIa3F,OAAO,CAAC4F,UAAR,CAAmBE,aAAa,CAAClF,IAAjC,EAAuCuC,KAAvC,CAJb;AAAA;AAAA,mCAKmB9C,QAAQ,CAACJ,OAAD,EAAU0F,OAAV,CAL3B;;AAAA;AAKGE,mCALH;;AAMH,gCAAIA,OAAO,CAACK,cAAR,KAA2B,gBAA/B,EAAiD;AAC/C/D,0CAAY,CAACP,WAAb;AACAoB,qCAAO,CAAC6C,OAAD,CAAP;AACD;;AATE;AAAA;;AAAA;AAAA;AAAA;AAWHd,uCAAW,eAAQ9B,MAAR,EAAgB6C,aAAa,CAAClF,IAA9B,CAAX;;AAXG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;;AAAA;AAAA;AAAA;AAAA;AAcD,eA1BI;;AAEIV,mBAFJ,GAIDD,OAJC,CAEHE,KAFG,kCAIDF,OAJC,CAGHG,IAHG,MAGIC,QAHJ;AAML;AACJ;AACA;AACA;AACA;;AAVS,gDA0CE,IAAI0C,OAAJ;AAAA,oFAAY,kBAAgBC,OAAhB,EAAyBC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,4DACV/C,KAAK,CACTkC,MADI,CACG;AACNT,gCAAI,EAAE,KADA;AAENxB,iCAAK,EAAED,KAFD;AAGNsB,8BAAE,EAAEtB,KAAK,CAACgD,OAHJ;AAINzB,iCAAK,EAAEqD,WAJD;AAKNpD,mCAAO,EAAE,CAACxB,KAAK,CAACgD,OAAP,EAAgB,YAAhB,EAA8B,gBAA9B,CALH;AAMN7C,oCAAQ,EAAE0F,qBAAqB,CAAC/C,OAAD,EAAUC,MAAV;AANzB,2BADH,EASJQ,IATI,CASCuC,iBATD,WAUEjB,WAVF,CADU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAZ;;AAAA;AAAA;AAAA;AAAA,kBA1CF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAwDD;AAED;AACA;AACA;AACA;;AACO,SAASoB,cAAT,CAAwBnG,OAAxB,EAAiC;AACtC;AAAA,wEAAO,kBAAgBC,OAAhB;AAAA,2CAYImG,sBAZJ,EA0BIC,kBA1BJ;;AAAA;AAAA;AAAA;AAAA;AA0BIA,gCA1BJ,kCA0ByB;AAC5B,uBAAOnG,KAAK,CAACyC,MAAN,CACL3C,OAAO,CAACyB,KADH,EAELmB,IAAI,CAACc,SAAL,CACE1D,OAAO,CAACmG,cAAR,CAAuB;AACrBG,4BAAU,EAAEpG,KAAK,CAACoG,UADG;AAErBjC,4BAAU,EAAEnE,KAAK,CAACgD,OAFG;AAGrBuC,2BAAS,EAAEZ,aAHU;AAIrBa,2BAAS,EAAEZ;AAJU,iBAAvB,CADF,CAFK,CAAP;AAWD,eAtCI;;AAYIsB,oCAZJ,kCAY2BpD,OAZ3B,EAYoCC,MAZpC,EAY4C;AAC/C;AAAA,uFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBjC,mCAAlB,SAAkBA,OAAlB;AAAA;AAEGmC,iCAFH,GAEWP,IAAI,CAACC,KAAL,CAAW7B,OAAX,CAFX;AAGHP,mCAAO,CAACa,KAAR,CAAc,mBAAd,EAAmC6B,KAAnC;AACMwC,mCAJH,GAIa3F,OAAO,CAAC4F,UAAR,CAAmBO,cAAc,CAACvF,IAAlC,EAAwCuC,KAAxC,CAJb;AAAA;AAAA,mCAKmB9C,QAAQ,CAACJ,OAAD,EAAU0F,OAAV,CAL3B;;AAAA;AAKGE,mCALH;AAMH7C,mCAAO,CAAC6C,OAAD,CAAP;AANG;AAAA;;AAAA;AAAA;AAAA;AAQHd,uCAAW,eAAI9B,MAAJ,EAAYmD,sBAAsB,CAACxF,IAAnC,CAAX;;AARG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;;AAAA;AAAA;AAAA;AAAA;AAWD,eAxBI;;AAEIV,mBAFJ,GAIDD,OAJC,CAEHE,KAFG,kCAIDF,OAJC,CAGHG,IAHG,MAGIC,QAHJ;AAML;AACJ;AACA;AACA;AACA;AACA;;AAXS,gDAwCE,IAAI0C,OAAJ;AAAA,qFAAY,kBAAgBC,OAAhB,EAAyBC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,4DACV/C,KAAK,CACTkC,MADI,CACG;AACNT,gCAAI,EAAE,IADA;AAENxB,iCAAK,EAAED,KAFD;AAGNsB,8BAAE,EAAEtB,KAAK,CAACgD,OAHJ;AAINzB,iCAAK,EAAE,cAJD;AAKNC,mCAAO,EAAE,CAACxB,KAAK,CAACgD,OAAP,EAAgB,kBAAhB,EAAoC,iBAApC,CALH;AAMN7C,oCAAQ,EAAE+F,sBAAsB,CAACpD,OAAD,EAAUC,MAAV;AAN1B,2BADH,EASJQ,IATI,CASC4C,kBATD,WAUEtB,WAVF,CADU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAZ;;AAAA;AAAA;AAAA;AAAA,kBAxCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAsDD,C;;;;;;;;;;;;;;;;;;;;;ACtPY;;;;;;AAEb;AAEA,IAAMwB,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,aAAZ,IAA6B,gBAA7C;AACA,IAAMC,MAAM,GAAG,IAAIxF,MAAJ,CAAWqF,OAAO,CAACC,GAAR,CAAYG,YAAvB,KAAwC,SAAvD;AACA,IAAMC,OAAO,GAAGL,OAAO,CAACC,GAAR,CAAYK,cAAZ,IAA8B,aAAaN,OAAO,CAACO,GAAnE;AAEA,IAAMC,KAAK,GAAG,IAAIC,0CAAJ,CAAU;AACtBC,UAAQ,EAAE,UADY;AAEtBX,SAAO,EAAEA,OAAO,CAACY,KAAR,CAAc,GAAd;AAFa,CAAV,CAAd;AAKA,IAAMC,QAAQ,GAAGJ,KAAK,CAACI,QAAN,CAAe;AAAEP,SAAO,EAAPA;AAAF,CAAf,CAAjB;AACA,IAAMQ,QAAQ,GAAGL,KAAK,CAACK,QAAN,EAAjB;AAEA;AACA;AACA;;AACO,IAAMhF,KAAK,GAAG;AACnBI,WAAS,EAAE,KADQ;AAEnBkE,QAAM,EAANA,MAFmB;;AAInB;AACF;AACA;AACA;AACA;AACQvE,QATa,kBASNX,KATM,EASCpB,QATD,EASW;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEpB+G,QAAQ,CAACE,OAAT,EAFoB;;AAAA;AAAA;AAAA,qBAGpBF,QAAQ,CAACG,SAAT,CAAmB;AAAE9F,qBAAK,EAALA,KAAF;AAAS+F,6BAAa,EAAE;AAAxB,eAAnB,CAHoB;;AAAA;AAI1B,mBAAI,CAAC/E,SAAL,GAAiB,IAAjB;AAJ0B;AAAA,qBAKpB2E,QAAQ,CAACK,GAAT,CAAa;AACjBC,2BAAW;AAAA,6FAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAASjG,iCAAT,QAASA,KAAT,EAAgBT,OAAhB,QAAgBA,OAAhB;;AACX,gCAAI;AACFX,sCAAQ,CAAC;AACPoB,qCAAK,EAALA,KADO;AAEPT,uCAAO,EAAEA,OAAO,CAAC2G,KAAR,CAAcC,QAAd;AAFF,+BAAD,CAAR;AAID,6BALD,CAKE,OAAOlH,KAAP,EAAc;AACdD,qCAAO,CAACC,KAAR,CAAcA,KAAd;AACD;;AARU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADM,eAAb,CALoB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkB1BD,qBAAO,CAACC,KAAR;;AAlB0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoB7B,GA7BkB;;AA+BnB;AACF;AACA;AACA;AACA;AACQiC,QApCa,kBAoCNlB,KApCM,EAoCCT,OApCD,EAoCU;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEnBqG,QAAQ,CAACC,OAAT,EAFmB;;AAAA;AAAA;AAAA,qBAGnBD,QAAQ,CAACQ,IAAT,CAAc;AAClBpG,qBAAK,EAAEA,KADW;AAElBqG,wBAAQ,EAAE,CAAC;AAAEH,uBAAK,EAAE3G;AAAT,iBAAD;AAFQ,eAAd,CAHmB;;AAAA;AAAA;AAAA,qBAOnBqG,QAAQ,CAACU,UAAT,EAPmB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASzBtH,qBAAO,CAACC,KAAR,CAAc;AAAEC,oBAAI,EAAE,MAAI,CAACgC,MAAL,CAAY/B,IAApB;AAA0BF,qBAAK;AAA/B,eAAd;;AATyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW5B;AA/CkB,CAAd,C","file":"src_adapters_index_js.js","sourcesContent":["\"use strict\";\n\n/**\n * @typedef {import('../models/order').Order} Order\n * @typedef {string} address\n * @callback adapterFactory\n * @param {service} service\n * @returns {function({model:Order})} - verified/corrected address\n */\n\n/**\n *\n * @type {adapterFactory}\n * @param {import(\"../services/address-service\").Address} service\n */\nexport function validateAddress(service) {\n  return async function (options) {\n    const {\n      model: order,\n      args: [callback],\n    } = options;\n\n    try {\n      const shippingAddress = await service.validateAddress(\n        order.decrypt().shippingAddress\n      );\n      const update = await callback(options, { shippingAddress });\n      return update;\n    } catch (error) {\n      console.error({ func: validateAddress.name, error, options });\n    }\n  };\n}\n","\"use strict\";\n\nimport { Event } from \"../services/event-service\";\n/**\n * @typedef {import('../models').Model} Model\n * @typedef {string} serviceName\n *\n * @typedef {Object} EventMessage\n * @property {serviceName} eventSource\n * @property {serviceName|\"broadcast\"} eventTarget\n * @property {\"command\"|\"commandResponse\"|\"notification\"|\"import\"} eventType\n * @property {string} eventName\n * @property {string} eventTime\n * @property {string} eventUuid\n * @property {NotificationEvent|ImportEvent|CommandEvent} eventData\n *\n * @typedef {object} ImportEvent\n * @property {\"service\"|\"model\"|\"adapter\"} type\n * @property {string} url\n * @property {string} path\n * @property {string} importRemote\n *\n * @typedef {object} NotificationEvent\n * @property {string|} message\n * @property {\"utf8\"|Uint32Array} encoding\n * *\n * @typedef {Object} CommandEvent\n * @property {string} commandName\n * @property {string} commandResp\n * @property {*} commandArgs\n */\n\n/**\n * @typedef {{\n *  filter:function(message):Promise<void>,\n *  unsubscribe:function()\n * }} Subscription\n * @typedef {string|RegExp} topic\n * @callback eventHandler\n * @param {string} eventData\n * @typedef {eventHandler} notifyType\n * @typedef {{\n * listen:function(topic, x),\n * notify:notifyType\n * }} EventService\n * @callback adapterFactory\n * @param {EventService} service\n * @returns {function(topic, eventHandler)}\n */\n\n/**\n * @type {Map<any,Map<string,*>>}\n */\nconst subscriptions = new Map();\n\n/**\n * Test the filter.\n * @param {string} message\n * @returns {function(string|RegExp):boolean} did the filter match?\n */\nfunction filterMatches(message) {\n  return function (filter) {\n    const regex = new RegExp(filter);\n    const result = regex.test(message);\n    console.debug({ func: filterMatches.name, filter, result, message });\n    return result;\n  };\n}\n\n/**\n * @typedef {string} message\n * @typedef {string|RegExp} topic\n * @param {{\n *  id:string,\n *  callback:function(message,Subscription),\n *  topic:topic,\n *  filter:string|RegExp,\n *  once:boolean,\n *  model:import(\"../models\").Model\n * }} options\n */\nconst Subscription = function ({ id, callback, topic, filters, once, model }) {\n  return {\n    /**\n     * unsubscribe from topic\n     */\n    unsubscribe() {\n      subscriptions.get(topic).delete(id);\n    },\n\n    getId() {\n      return id;\n    },\n\n    getModel() {\n      return model;\n    },\n\n    getSubscriptions() {\n      return [...subscriptions.entries()];\n    },\n\n    /**\n     * Filter message and invoke callback\n     * @param {string} message\n     */\n    async filter(message) {\n      if (filters) {\n        // Every filter must match.\n        if (filters.every(filterMatches(message))) {\n          if (once) {\n            // Only looking for 1 msg, got it.\n            this.unsubscribe();\n          }\n          callback({ message, subscription: this });\n          return;\n        }\n        // no match\n        return;\n      }\n      // no filters defined, just invoke the callback.\n      callback({ message, subscription: this });\n    },\n  };\n};\n\n/**\n * Listen for external events with default event service if none specified.\n * @type {adapterFactory}\n * @param {import('../services/event-service').Event} [service] - has default service\n */\nexport function listen(service = Event) {\n  return async function (options) {\n    const {\n      model,\n      args: [arg],\n    } = options;\n\n    const subscription = Subscription({ model, ...arg });\n\n    if (subscriptions.has(arg.topic)) {\n      subscriptions.get(arg.topic).set(arg.id, subscription);\n      return subscription;\n    }\n\n    subscriptions.set(arg.topic, new Map().set(arg.id, subscription));\n\n    if (!service.listening) {\n      service.listen(/Channel/, async function ({ topic, message }) {\n        if (subscriptions.has(topic)) {\n          subscriptions.get(topic).forEach(async subscription => {\n            await subscription.filter(message);\n          });\n        }\n      });\n    }\n    return subscription;\n  };\n}\n\n/**\n * @type {adapterFactory}\n * @returns {function(topic, eventData)}\n */\nexport function notify(service = Event) {\n  return async function ({ model, args: [topic, message] }) {\n    console.debug(\"sending...\", { topic, message: JSON.parse(message) });\n    await service.notify(topic, message);\n    return model;\n  };\n}\n","\"use strict\";\n\nexport * from \"./address-adapter\";\nexport * from \"./payment-adapter\";\nexport * from \"./shipping-adapter\";\nexport * from \"./event-adapter\";\nexport * from \"./inventory-adapter\";\n\n/**\n * @typedef {import('../models').Model} Model\n * @typedef {function(function(eventCallback):Promise<Model>)} adapterFunction\n */\n","\"use strict\";\n\n/**\n * @typedef {string|RegExp} topic\n * @callback eventCallback\n * @param {string} message\n * @param {{\n *  getModel:function():object,\n *  unsubscribe:function()\n * }} subscription\n * @typedef {eventCallback} shipOrderType\n * @param topic,\n * @param eventCallback\n * @typedef {{\n *  shipOrder:shipOrderType,\n *  trackShipment:function(),\n *  verifyDelivery:function()\n * }} InventoryAdapter\n * @typedef {import('../models/order').Order} Order\n * @typedef {InventoryAdapter} service \n * @typedef {{\n *  listen:function(topic,RegExp,eventCallback)\n *  notify:function(topic,eventCallback)\n * }} event\n * @callback adapterFactory\n * @param {service} service\n * @param {event} event\n * @returns {function({\n * model:Order,\n * resolve:function()\n * ,args:[\n * eventCallback, \n * options:{}]\n * })}\n   \n }]})} \n *\n */\n\n/**\n * @type {adapterFactory}\n */\nexport function pickOrder(service) {\n  return function (options) {\n    const {\n      model: order,\n      args: [callback],\n    } = options;\n\n    return new Promise(function (resolve, reject) {\n      // start listening first then send the event\n      return order\n        .listen({\n          once: true,\n          model: order,\n          id: order.orderNo,\n          topic: \"orderChannel\",\n          filters: [order.orderNo, \"orderPicked\", \"warehouse_addr\"],\n          callback: async ({ message }) => {\n            try {\n              const event = JSON.parse(message);\n              console.log(\"recieved event: \", event);\n              const pickupAddress = event.eventData.warehouse_addr;\n              const newOrder = await callback(options, { pickupAddress });\n              resolve(newOrder); // hold promise until we get an answer\n            } catch (error) {\n              reject(error);\n            }\n          },\n        })\n        .then(() => {\n          return order.notify(\n            \"inventoryChannel\",\n            JSON.stringify({\n              eventType: \"Command\",\n              eventTime: new Date().toUTCString(),\n              eventSource: \"orderService\",\n              eventData: {\n                replyChannel: \"orderChannel\",\n                commandName: \"pickOrder\",\n                commandArgs: {\n                  lineItems: order.orderItems,\n                  externalId: order.orderNo,\n                },\n              },\n            })\n          );\n        })\n        .catch((reason) => {\n          throw new Error(reason);\n        });\n    });\n  };\n}\n","\"use strict\";\n\n/**\n * @typedef {import('../models/order').Order} Order\n * @typedef\n * @callback adapterFactory\n * @param {service} service\n * @returns {function({model:Order,parms:any[]})}\n */\n\n/**\n * @type {adapterFactory}\n * @param {import(\"../services/payment-service\").PaymentService} service\n */\nexport function authorizePayment(service) {\n  return async function (options) {\n      const {\n        model: order,\n        args: [callback],\n      } = options;\n\n      const paymentAuthorization = await service.authorizePayment(\n        order.orderNo,\n        12.0,\n        \"src\",\n        \"ibm\",\n        false\n      );\n      return callback(options, { paymentAuthorization });\n  };\n}\n\n/**\n * @type {adapterFactory}\n */\nexport function completePayment(service) {\n  return async function (options) {\n    const {\n      model: order,\n      args: [callback],\n    } = options;\n    const confirmationCode = await service.completePayment(order);\n    const newOrder = await callback(options, { confirmationCode });\n    return newOrder;\n  };\n}\n/**\n * @type {adapterFactory}\n */\nexport function refundPayment(service) {\n  return async function (options) {\n    const {\n      model: order,\n      args: [callback],\n    } = options;\n    await service.refundPayment(order);\n    const newOrder = await callback(options);\n    return newOrder;\n  };\n}\n","\"use strict\";\n\n/**\n * @callback portCallback\n * @param {{options:{}}}\n * @param {{payload:{[key]:string}}}\n */\n\n/**\n * @typedef {string} message\n * @callback eventCallback\n * @param {string} message\n * @param {{\n *  unsubscribe:function(),\n *  filter:function(message):boolean\n * }} subscription\n */\n\n/**\n * @typedef {import('../models/order').Order} Order\n */\n\n/**\n * @typedef {import(\"../services/shipping-service\").shippingService} shippingService\n */\n\n/**\n * @typedef {{\n *  listen:function(topic,RegExp,portCallback)\n *  notify:function(topic,eventCallback)\n * }} event\n */\n\n/**\n * @callback adapterFactory\n * @param {service} service\n * @returns {function({model:Order,args:[portCallback]}):Order}\n */\n\nconst ORDER_SERVICE = \"orderService\";\nconst ORDER_TOPIC = \"orderChannel\";\n\nconst handleError = (error, reject = null, func = null) => {\n  console.error({ file: __filename, func, error });\n  if (reject) reject(error);\n};\n\n/**\n * Call `shipOrder` to request shipment of the order items.\n * @param {import('../services/shipping-service').shippingService} service\n * @type {adapterFactory}\n * @returns {function(options):Promise<Order>}\n * Return a promise that is resolved once we receive\n * a response message from the shipping service. Start\n * listening for the response first and then send the\n * request message.\n *\n */\nexport function shipOrder(service) {\n  return async function (options) {\n    const {\n      model: order,\n      args: [callback],\n    } = options;\n\n    /**\n     * Called by the event listener when the shipOrder\n     * response message arrives. Resolve the promise\n     * the caller has been waiting on since we sent\n     * the request message.\n     * @param {function(Order)} resolve\n     * @param {function(Error)} reject\n     * @returns {function(message):Promise<Order>}\n     */\n    function shipOrderCallback(resolve, reject) {\n      return async function ({ message }) {\n        try {\n          const event = JSON.parse(message);\n          console.debug(\"received event... \", event);\n          const payload = service.getPayload(shipOrder.name, event);\n          const updated = await callback(options, payload);\n          resolve(updated);\n        } catch (error) {\n          handleError(error, reject, shipOrderCallback.name);\n        }\n      };\n    }\n\n    /**\n     * Send the shipOrder event to the shipping service.\n     */\n    function callShipOrder() {\n      return order.notify(\n        service.topic,\n        JSON.stringify(\n          service.shipOrder({\n            shipTo: order.decrypt().shippingAddress,\n            shipFrom: order.pickupAddress,\n            lineItems: order.orderItems,\n            signature: order.signatureRequired,\n            externalId: order.orderNo,\n            requester: ORDER_SERVICE,\n            respondOn: ORDER_TOPIC,\n          })\n        )\n      );\n    }\n\n    return new Promise(function (resolve, reject) {\n      return order\n        .listen({\n          once: true,\n          model: order,\n          id: order.orderNo,\n          topic: ORDER_TOPIC,\n          filters: [order.orderNo, \"orderShipped\", \"shipmentId\"],\n          callback: shipOrderCallback(resolve, reject),\n        })\n        .then(callShipOrder)\n        .catch(handleError);\n    });\n  };\n}\n\n/**\n * @param {import('../services/shipping-service').shippingService} service\n * @type {adapterFactory}\n */\nexport function trackShipment(service) {\n  return async function (options) {\n    const {\n      model: order,\n      args: [callback],\n    } = options;\n\n    /**\n     *\n     * @param {function(Order)} resolve resolve the promise\n     * @param {function(Error)} reject reject promise\n     */\n    function trackShipmentCallback(resolve, reject) {\n      return async function ({ message, subscription }) {\n        try {\n          const event = JSON.parse(message);\n          console.debug(\"received event...\", event);\n          const payload = service.getPayload(trackShipment.name, event);\n          const updated = await callback(options, payload);\n          if (updated.trackingStatus === \"orderDelivered\") {\n            subscription.unsubscribe();\n            resolve(updated);\n          }\n        } catch (error) {\n          handleError(error, reject, trackShipment.name);\n        }\n      };\n    }\n\n    function callTrackShipment() {\n      return order.notify(\n        service.topic,\n        JSON.stringify(\n          service.trackShipment({\n            shipmentId: order.shipmentId,\n            externalId: order.orderNo,\n            requester: ORDER_SERVICE,\n            respondOn: ORDER_TOPIC,\n          })\n        )\n      );\n    }\n\n    return new Promise(async function (resolve, reject) {\n      return order\n        .listen({\n          once: false,\n          model: order,\n          id: order.orderNo,\n          topic: ORDER_TOPIC,\n          filters: [order.orderNo, \"trackingId\", \"trackingStatus\"],\n          callback: trackShipmentCallback(resolve, reject),\n        })\n        .then(callTrackShipment)\n        .catch(handleError);\n    });\n  };\n}\n\n/**\n * @param {import('../services/shipping-service').shippingService} service\n * @type {adapterFactory}\n */\nexport function verifyDelivery(service) {\n  return async function (options) {\n    const {\n      model: order,\n      args: [callback],\n    } = options;\n\n    /**\n     *\n     * @param {function(Order)} resolve\n     * @param {function(Error)} reject\n     * @returns\n     */\n    function verifyDeliveryCallback(resolve, reject) {\n      return async function ({ message }) {\n        try {\n          const event = JSON.parse(message);\n          console.debug(\"received event...\", event);\n          const payload = service.getPayload(verifyDelivery.name, event);\n          const updated = await callback(options, payload);\n          resolve(updated);\n        } catch (e) {\n          handleError(e, reject, verifyDeliveryCallback.name);\n        }\n      };\n    }\n\n    function callVerifyDelivery() {\n      return order.notify(\n        service.topic,\n        JSON.stringify(\n          service.verifyDelivery({\n            trackingId: order.trackingId,\n            externalId: order.orderNo,\n            requester: ORDER_SERVICE,\n            respondOn: ORDER_TOPIC,\n          })\n        )\n      );\n    }\n\n    return new Promise(async function (resolve, reject) {\n      return order\n        .listen({\n          once: true,\n          model: order,\n          id: order.orderNo,\n          topic: \"orderChannel\",\n          filters: [order.orderNo, \"deliveryVerified\", \"proofOfDelivery\"],\n          callback: verifyDeliveryCallback(resolve, reject),\n        })\n        .then(callVerifyDelivery)\n        .catch(handleError);\n    });\n  };\n}\n","\"use strict\";\n\nimport { Kafka } from \"kafkajs\";\n\nconst brokers = process.env.KAFKA_BROKERS || \"localhost:9092\";\nconst topics = new RegExp(process.env.KAFKA_TOPICS) || /Channel/;\nconst groupId = process.env.KAFKA_GROUP_ID || \"MicroLib\" + process.pid;\n\nconst kafka = new Kafka({\n  clientId: \"MicroLib\",\n  brokers: brokers.split(\",\"),\n});\n\nconst consumer = kafka.consumer({ groupId });\nconst producer = kafka.producer();\n\n/**\n * @typedef {EventService}\n */\nexport const Event = {\n  listening: false,\n  topics,\n\n  /**\n   * Implements event consumer service.\n   * @param {string|RegExp} topic\n   * @param {function({message, topic})} callback\n   */\n  async listen(topic, callback) {\n    try {\n      await consumer.connect();\n      await consumer.subscribe({ topic, fromBeginning: true });\n      this.listening = true;\n      await consumer.run({\n        eachMessage: async ({ topic, message }) => {\n          try {\n            callback({\n              topic,\n              message: message.value.toString(),\n            });\n          } catch (error) {\n            console.error(error);\n          }\n        },\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  },\n\n  /**\n   * Implemements event producer service.\n   * @param {string|RegExp} topic\n   * @param {string} message\n   */\n  async notify(topic, message) {\n    try {\n      await producer.connect();\n      await producer.send({\n        topic: topic,\n        messages: [{ value: message }],\n      });\n      await producer.disconnect();\n    } catch (error) {\n      console.error({ func: this.notify.name, error });\n    }\n  },\n};\n"],"sourceRoot":""}